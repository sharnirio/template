// mixin

// mixin clearfix
@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
        zoom: 1;
    }
}
// @include clearfix;

// mixin Respond-to
@mixin respond-to($media) {
              // 1920px
    @if $media==more_full {
        @media only screen and (min-width: #{$screen-more_full}) {
            @content;
        }
    }
    @else if $media==full {
        @media only screen and (max-width: #{$screen-full}) {
            @content;
        }
    }
                 //1200px
    @else if $media==pc {
        @media only screen and (max-width: #{$screen-lg}) {
            @content;
        }
    }               // 990px
    @else if $media==tablets {
        @media only screen and (max-width: #{$screen-md}) {
            @content;
        }
    }               // 800px
    @else if $media==wide_handhelds {
        @media only screen and (max-width: #{$screen-sm}) {
            @content;
        }
    }               // 480px
    @else if $media==handhelds {
        @media only screen and (max-width: #{$screen-xs}) {
            @content;
        }
    }           // 320px
    @else if $media==fon {
        @media only screen and (max-width: #{$screen-c}) {
            @content;
        }
    }       // for retina display
    @else if $media==retina {
        @media only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-resolution: 144dpi) {
            @content;
        }
    }
}

// @include respond-to(fon) { border: none; }

// Создаем mixin animate dalay and duration
@mixin animate ($delay:1s/* , $duration:1s */) {
    // .animated  {
      animation-delay: $delay;
      // animation-duration: $duration;
    // }
}
// @include animate ();

// Создаем mixin для центрирования
@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}
// @include centerer(true, true);

//mixin font-face
@mixin font-face-mixin($font-family: "font-family",$file-name: "file-name", $font-weight: normal, $font-style: normal, $file-path: "fonts") {
font-family: "#{$font-family}";
src: url('../#{$file-path}/#{$file-name}/#{$file-name}.eot');
src: url('../#{$file-path}/#{$file-name}/#{$file-name}.eot?#iefix') format('embedded-opentype'),
     url('../#{$file-path}/#{$file-name}/#{$file-name}.woff2') format('woff2'), url('../#{$file-path}#{$file-name}.woff') format('woff'),
     url('../#{$file-path}#{$file-name}.ttf') format('truetype'), url('../#{$file-path}/#{$file-name}.svg') format('svg');
font-weight: $font-weight;
font-style: $font-style;
}
// @include font-face("fon-family-name", "file-name", "file-type", "file-path");

//mixin  reset-buton
@mixin reset-btn() {
    border: none;
    outline: none;
    margin: 0;
    cursor: pointer;
}
// @include reset-btn;

//mixin calculateRem
@function calculateRem($size) {
  $remSize: $size / 16px;
  @return $remSize * 1rem;
}

@mixin fs($size) {
   @if ($size > 16){
    font-size: $size;
  font-size: calculateRem($size);
   }
   @else if {
    font-size: $size;
   }

}
// p { @include fs(14px)}

//mixin calculateRemLh
@function calculateRemLh($sizeLh) {
  $remSizeLh: $sizeLh / 16px;
  @return $remSizeLh * 1rem;
}

@mixin lh($sizeLh) {
  line-height: $sizeLh;
  line-height: calculateRemLh($sizeLh);
}
// p { @include lh(36px);}

//mixin calculate em --- px
$browser-context: 16;

@function em($pixels, $context: $browser-context) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return $pixels / $context * 1em;
}
//h1 { font-size: em(32); }


